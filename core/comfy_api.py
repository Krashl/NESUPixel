# core/comfy_api.py

import json
import uuid
import requests
import websocket
import threading
import time

from core.settings import COMFY_API_URL, WORKFLOW_PATH, DEBUG


def generate_client_id() -> str:
    return str(uuid.uuid4())

def load_and_patch_workflow(workflow_name: str, node_overrides: dict) -> dict:
    workflow_path = WORKFLOW_PATH / f"{workflow_name}.json"
    with open(workflow_path, "r", encoding="utf-8") as f:
        workflow = json.load(f)

    for node_id, inputs in node_overrides.items():
        if node_id in workflow:
            workflow[node_id]["inputs"].update(inputs)
    return workflow

def queue_prompt(workflow_dict: dict, client_id: str) -> str:
    response = requests.post(
        f"{COMFY_API_URL}/prompt",
        json={"prompt": workflow_dict, "client_id": client_id}
    )
    response.raise_for_status()
    return response.json().get("prompt_id")

def interrupt():
    try:
        response = requests.post(f"{COMFY_API_URL}/interrupt")
        return response.status_code == 200
    except Exception as e:
        print(f"[Interrupt] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏: {e}")
        return False

def get_node_outputs_from_history(prompt_id: str, node_ids: list[str]) -> dict[str, list[dict]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–æ–¥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ ComfyUI.

    –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –≤ ComfyUI:
    ------------------
    –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ—Ä–∫—Ñ–ª–æ—É (prompt) –≤ ComfyUI —á–µ—Ä–µ–∑ API, –µ–º—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π `prompt_id` (—á–∞—â–µ –≤—Å–µ–≥–æ —ç—Ç–æ UUID).
    –≠—Ç–æ—Ç `prompt_id` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ö—Ä–∞–Ω—è—â–µ–π—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Comfy-—Å–µ—Ä–≤–µ—Ä–∞.

    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞:
    -------------------
    GET /history/{prompt_id}

    –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äî —ç—Ç–æ —Å–∞–º `prompt_id`, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑:

    - "prompt": —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –Ω–æ–¥ –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ Comfy –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ.  
      –≠—Ç–æ –ø–æ–ª–Ω—ã–π JSON –≤–æ—Ä–∫—Ñ–ª–æ—É, –≤–∫–ª—é—á–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏–º–µ–Ω–∞ –Ω–æ–¥, —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–∏–º–∏.

    - "outputs": —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–ª—é—á–∏ ‚Äî —ç—Ç–æ ID –Ω–æ–¥, –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å–ª–æ–≤–∞—Ä–∏ —Å –≤—ã—Ö–æ–¥–∞–º–∏ –Ω–æ–¥.  
      –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è SaveImage –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫:
        {
          "16": {
              "images": [
                  {
                      "filename": "Txt2Img_00006_.png",
                      "subfolder": "NESUPixel\\Txt2Img",
                      "type": "output"
                  }
              ]
          }
        }

    - "status": —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ö–æ–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
        {
            "status_str": "success",
            "completed": true,
            "messages": [
                ["execution_start", {...}],
                ["execution_cached", {...}],
                ["execution_success", {...}]
            ]
        }

    - "meta": —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ `display_node`, `real_node_id`, `parent_node`.  
      –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –Ω–æ–¥, —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∏ UI-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    ----------
    prompt_id : str
        –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ—Ä–∫—Ñ–ª–æ—É-–∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (`queue_prompt()`).
    
    node_ids : list[str]
        –°–ø–∏—Å–æ–∫ ID –Ω–æ–¥, –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ["16", "13", "7"]).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    dict[str, list[dict]]
        –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {node_id: list_outputs}, –≥–¥–µ list_outputs ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –≤—ã—Ö–æ–¥ –Ω–æ–¥—ã.
        –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:
        - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (images)
        - —Ç–µ–∫—Å—Ç (text)
        - –∞—É–¥–∏–æ (audio)
        - –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–π –Ω–æ–¥–æ–π.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    ----------------------
    outputs = get_node_outputs_from_history("a1b2c3", ["16", "13"])
    images = outputs["16"]
    first_image_path = images[0]["filename"]

    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
    ------------
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è **—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞** –∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π,
    –Ω–æ –∏ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –Ω–æ–¥–∞–º–∏ ComfyUI.
    –û–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ **–≤ —Å–ª—É—á–∞–µ –∫—ç—à–∞** –∏–ª–∏
    –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ WebSocket.
    """

    try:
        response = requests.get(f"{COMFY_API_URL}/history/{prompt_id}")
        if response.status_code != 200:
            return {}

        data = response.json()
        if DEBUG:
             print(f"[History] {data}")

        prompt_data = data.get(prompt_id, {})
        outputs = prompt_data.get("outputs", {})

        result = {}

        for node_id in node_ids:
            if node_id in outputs:
                result[node_id] = outputs[node_id]

        return result

    except Exception as e:
        print(f"[History] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return {}

def monitor_websocket_for_node_output(client_id: str, expected_prompt_id: str, watch_node_ids: list[str], timeout: int = 15) -> dict[str, list[dict]]:
    """
    –°–ª—É—à–∞–µ—Ç WebSocket –æ—Ç ComfyUI –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—ã—Ö–æ–¥—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–æ–¥ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
    ------------
    1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å `client_id`
    2. –°–ª—É—à–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä ComfyUI –ø–æ –∞–¥—Ä–µ—Å—É `/ws?clientId=...`
    3. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è `executed` –æ—Ç –Ω—É–∂–Ω–æ–π –Ω–æ–¥—ã ‚Äî –∑–∞–±–∏—Ä–∞–µ–º –µ–µ output (images, text, etc)
    4. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞—è –Ω–æ–¥–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–∏:
    ---------------------
    - –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ (ne–∫—ç—à)
    - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ get_node_outputs_from_history()

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    ----------
    client_id : str
        –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    expected_prompt_id : str
        ID –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    watch_node_ids : list[str]
        –°–ø–∏—Å–æ–∫ –Ω–æ–¥, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∂–¥—ë–º

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    dict[str, list[dict]]
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –Ω–æ–¥–∞–º
    """
    result: dict[str, list[dict]] = {}
    event = threading.Event()

    def on_message(ws, message):
        try:
            data = json.loads(message)

            if DEBUG and data.get("type") != "crystools.monitor":
                print(f"[WS] üì© {data}")

            if data.get("type") == "executed":
                d = data.get("data", {})
                if d.get("prompt_id") != expected_prompt_id:
                    return
                node_id = d.get("node")
                if node_id in watch_node_ids:
                    output_data = d.get("output", {})
                    result[node_id] = []
                    for key, value in output_data.items():
                        if isinstance(value, list):
                            result[node_id].extend(value)
                    event.set()
                    ws.close()
        except Exception as e:
            print(f"[WS] ‚ö† –û—à–∏–±–∫–∞: {e}")

    ws_url = COMFY_API_URL.replace("http", "ws") + f"/ws?clientId={client_id}"
    ws = websocket.WebSocketApp(ws_url, on_message=on_message)

    thread = threading.Thread(target=ws.run_forever)
    thread.daemon = True
    thread.start()

    success = event.wait(timeout)

    if ws.sock and ws.sock.connected:
        ws.close()

    return result if success else {}

# core/comfy_api.py (–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–æ–¥—É)

def monitor_until_nodes_ready(
    client_id: str,
    prompt_id: str,
    watch_node_ids: list[str],
    timeout: int = 15,
    check_interval: float = 2.0,
    interrupt_on_ready: bool = False,
    preview_callback = None,
) -> dict[str, list[dict]]:
    """
    –û–∂–∏–¥–∞–µ—Ç, –ø–æ–∫–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–æ–¥—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ComfyUI.
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç WebSocket –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:
    - –°–ª—É—à–∞–µ—Ç WebSocket —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ–Ω–µ)
    - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    - –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –Ω–æ–¥—ã –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ -- –∑–∞–≤–µ—Ä—à–∞–µ—Ç
    """
    result: dict[str, list[dict]] = {}
    event = threading.Event()
    received_executed = set()

    def request_interrupt():
        try:
            url = COMFY_API_URL + "/interrupt"
            response = requests.post(url)
            if DEBUG:
                print(f"[INTERRUPT] –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response.status_code}")
        except Exception as e:
            print(f"[INTERRUPT] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏: {e}")

    def on_message(ws, message):
        nonlocal received_executed
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã–º (–ø—Ä–µ–≤—å—é)
            if isinstance(message, bytes):
                if preview_callback and callable(preview_callback):
                    try:
                        # –í–∞–∂–Ω–æ! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 –±–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                        preview_data = message[8:]
                        
                        if DEBUG:
                            print(f"[WS] –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–µ–≤—å—é), —Ä–∞–∑–º–µ—Ä: {len(message)} –±–∞–π—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(preview_data)} –±–∞–π—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                        
                        preview_callback(preview_data)
                    except Exception as e:
                        if DEBUG:
                            print(f"[WS] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –ø—Ä–µ–≤—å—é: {e}")
                return
            
            # –ï—Å–ª–∏ –Ω–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ JSON
            data = json.loads(message)

            if DEBUG and data.get("type") != "crystools.monitor":
                print(f"[WS] üì© {data}")

            if data.get("type") == "executed":
                d = data.get("data", {})
                if d.get("prompt_id") == prompt_id and d.get("node") in watch_node_ids:
                    received_executed.add(d.get("node"))
                    if DEBUG:
                        print(f"[WS] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ executed –¥–ª—è –Ω–æ–¥—ã {d.get('node')}")
                    if all(n in received_executed for n in watch_node_ids):
                        if interrupt_on_ready:
                            request_interrupt()
                        event.set()
                        ws.close()

            elif data.get("type") == "execution_cached":
                d = data.get("data", {})
                if d.get("prompt_id") == prompt_id:
                    cached_nodes = d.get("nodes", [])
                    if all(n in cached_nodes for n in watch_node_ids):
                        if DEBUG:
                            print("[WS] üíæ –í—Å–µ –Ω—É–∂–Ω—ã–µ –Ω–æ–¥—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º.")
                        if interrupt_on_ready:
                            request_interrupt()
                        event.set()
                        ws.close()
                    else:
                        if DEBUG:
                            print("[WS] ‚è≥ –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ -- –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ.")

            elif data.get("type") == "status":
                d = data.get("data", {})
                exec_info = d.get("status", {}).get("exec_info", {})
                if exec_info.get("queue_remaining") == 0:
                    if DEBUG:
                        print("[WS] ‚èπ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å.")
                    event.set()
                    ws.close()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–≤—å—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            elif data.get("type") == "preview":
                if preview_callback and callable(preview_callback):
                    try:
                        preview_data = data.get("data", {}).get("image")
                        if preview_data:
                            import base64
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            binary_data = base64.b64decode(preview_data)
                            preview_callback(binary_data)
                            if DEBUG:
                                print(f"[WS] –ü–æ–ª—É—á–µ–Ω–æ JSON –ø—Ä–µ–≤—å—é, —Ä–∞–∑–º–µ—Ä: {len(binary_data)} –±–∞–π—Ç")
                    except Exception as e:
                        if DEBUG:
                            print(f"[WS] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON –ø—Ä–µ–≤—å—é: {e}")

        except Exception as e:
            print(f"[WS] ‚ö† –û—à–∏–±–∫–∞: {e}")

    # –ó–∞–ø—É—Å–∫ WebSocket
    ws_url = COMFY_API_URL.replace("http", "ws") + f"/ws?clientId={client_id}"
    ws = websocket.WebSocketApp(
        ws_url, 
        on_message=on_message,
        on_error=lambda ws, error: print(f"[WS] ‚ö† –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {error}"),
        on_close=lambda ws, code, reason: print("[WS] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    def on_open(ws):
        if DEBUG:
            print("[WS] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–µ–≤—å—é")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π ComfyUI
        ws.send(json.dumps({"type": "subscribe", "data": {"channel": "preview"}}))
        ws.send(json.dumps({"type": "binary_preview"}))

    ws.on_open = on_open

    thread = threading.Thread(target=ws.run_forever, kwargs={"ping_interval": 5})
    thread.daemon = True
    thread.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è (WebSocket –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç)
    start_time = time.time()
    success = event.wait(timeout)

    if ws.sock and ws.sock.connected:
        ws.close()

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ generation –∑–∞–≤–µ—Ä—à–µ–Ω–∞ -- –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    if DEBUG:
        print("[INFO] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

    result = get_node_outputs_from_history(prompt_id, watch_node_ids)
    return result if result else {}